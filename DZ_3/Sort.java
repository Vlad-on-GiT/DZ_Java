package DZ_3;

public class Sort {
    public static void main(String[] args) {
        int[] arr = {2, 9, 5, 4, 8, 1, 6, -6}; // Создаём массив
        mergeSort(arr);                        // Используем наш метод сортировки слиянием

        for( int i = 0; i < arr.length; i++)   // Выводим отсортированный массив в консоль
            System.out.print(arr[i] + " ");
    }

    public static void mergeSort ( int[] arr){   // Создание метода сортировки
        int n = arr.length;                       // создаем переменную  размером массива
        if (n == 1) return;                       // условие выхода из рекурсии

        int mid = n / 2;                          // создаем переменную размером равную половине массива
        int[] l = new int[mid];                   // создаем пустой массив равный половине массива
        int[] r = new int[n - mid];               // вторая половина массива
        for (int i = 0; i < mid; i++)             // заполняем левый массив
            l[i] = arr[i];
        for (int i = mid; i < n; i++)             // заполняем правый массив
            r[i - mid] = arr[i];

        mergeSort(l);                             // вызываем рекурсивно для левой части
        mergeSort(r);                             // вызываем рекурсивно для правой части
        merge(arr, l, r);                         // сливаем в отсортированный массив
    }

    private static void merge (int[] arr, int[] l, int[] r) {     // создание метода слияния
        int left = l.length;                      // создаем перемменную размером с левый массив
        int right = r.length;                     // создаем перемменную размером с правый массив
        int i = 0;                                // переменная которая будет расти до размера left
        int j = 0;                                // переменная которая будет расти до размера right
        int idx = 0;                              // индекс дял заполнения основного массива

        while (i < left && j < right) {           // цикл пока не проверим все числа
            if (l[i] < r[j]) {                    // сравниваем левую часть и праввую
                arr[idx] = l[i];                  // если левая часть меньше пишем ее в arr
                i++;
                idx++;
            } else {
                arr[idx] = r[j];                  // если правая часть меньше пишем ее в arr
                j++;
                idx++;
            }
        }
        for (int ll = i; ll < left; ll++)         // если остались числа которые не попали в итоговый массив из левой части
            arr[idx++] = l[ll];
        for (int rr = j; rr < right; rr++)        // если остались числа которые не попали в итоговый массив из правой части
            arr[idx++] = r[rr];
    }
}
